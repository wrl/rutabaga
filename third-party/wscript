#!/usr/bin/env python

top = '..'

def build_uv(ctx):
	from_gyp = ctx.target_from_gyp('libuv', 'libuv/uv.gyp')

	extra_cflags = [
		'-Wno-gnu-statement-expression',
		'-Wno-cast-align',
		'-Wno-varargs'
	]

	from_gyp['cflags'].remove('-pedantic')

	if ctx.env.DEST_OS == 'win32':
		import re

		from_gyp['defines'].remove('_GNU_SOURCE')

		extra_cflags += [
			'-std=gnu89',

			'-Wno-attributes',
			'-Wno-sign-compare',
			'-Wno-unused-function',
			'-Wno-pointer-sign',
			'-Wno-maybe-uninitialized',
			'-Wno-unused-but-set-variable',
			'-Wno-unused-variable',
			'-Wno-missing-braces',

			'-fno-strict-aliasing']

		from_gyp['libraries'] = [re.sub(r'\.lib$', '', x)
				for x in from_gyp['libraries']]

	elif ctx.env.DEST_OS == 'darwin':
		# some bullshit about converting between void pointer and function pointer
		from_gyp['ldflags'].remove('-pthread')

	elif ctx.env.DEST_OS == 'linux':
		if ctx.env['CC'][0].find('clang') < 0:
			# gcc keeps adding warnings (which are good for code quality) that
			# clang doesn't know about, so they have to be special-cased here.

			extra_cflags += [
				'-Wno-address-of-packed-member',
				'-Wno-dangling-pointer',
				'-Wno-cast-function-type'
            ]

	ctx.env.append_unique('LINKFLAGS_UV_FLAGS', from_gyp['ldflags'])
	ctx.env.append_unique('LIB_UV_FLAGS', from_gyp['libraries'])

	ctx.stlib(
		source=from_gyp['sources'],
		includes=['libuv/include', 'libuv/src'],
		export_includes='libuv/include',
		defines=from_gyp['defines'],

		cflags=from_gyp['cflags'] + ctx.env['CFLAGS_cshlib'] + extra_cflags,
		linkflags=from_gyp['ldflags'],
		lib=from_gyp['libraries'],

		use='UV_FLAGS',

		target='uv',
		name='LIBUV')

def build(ctx):
	build_uv(ctx)
